kubernetes-dashboard:
  image:
    ## Repository for container
    repository: kubernetesui/dashboard
    tag: ""  # If not defined, uses appVersion of Chart.yaml
    pullPolicy: IfNotPresent
    pullSecrets: []

  ## Number of replicas
  replicaCount: 1

  extraArgs:
   - --enable-skip-login
   - --disable-settings-authorizer
   - --enable-insecure-login

  securityContext:
    seccompProfile:
      type: RuntimeDefault
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsUser: 1001
    runAsGroup: 2001

  ## Pod resource requests & limits
  resources:
    requests:
      cpu: 100m
      memory: 200Mi
    limits:
      cpu: 2
      memory: 200Mi

  ## Serve application over HTTP without TLS
  ##
  ## Note: If set to true, you may want to add --enable-insecure-login to extraArgs
  protocolHttp: false


  ingress:
      main:
  ## If true, Kubernetes Dashboard Ingress will be created.
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          hajimari.io/icon: mdi:kubernetes 
          hajimari.io/appName: Dashboard
          hajimari.io/info: Kubernetes dashboard
        hosts:
          - host: &host kubernetes.toolstowelsandfroods.com
            paths:
              - path: /
                pathType: Prefix
        tls:
          - secretName: kubernetes-dashboard-tls-certificate
            hosts:
              - *host

  ## Metrics Scraper
  ## Container to scrape, store, and retrieve a window of time from the Metrics Server.
  ## refs: https://github.com/kubernetes-sigs/dashboard-metrics-scraper
  metricsScraper:
    ## Wether to enable dashboard-metrics-scraper
    enabled: true
    image:
      repository: kubernetesui/metrics-scraper
      tag: v1.0.8
    resources: {}

  metrics-server:
    enabled: true
    ## Example for additional args
    # args:
    #  - --kubelet-preferred-address-types=InternalIP
    #  - --kubelet-insecure-tls

  rbac:
    # Specifies whether namespaced RBAC resources (Role, Rolebinding) should be created
    create: true

    # Specifies whether cluster-wide RBAC resources (ClusterRole, ClusterRolebinding) to access metrics should be created
    # Independent from rbac.create parameter.
    clusterRoleMetrics: true

    # Independent from rbac.create parameter.
    clusterReadOnlyRole: false

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  livenessProbe:
    # Number of seconds to wait before sending first probe
    initialDelaySeconds: 30
    # Number of seconds to wait for probe response
    timeoutSeconds: 30

  ## podDisruptionBudget
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  podDisruptionBudget:
    enabled: false
    ## Minimum available instances; ignored if there is no PodDisruptionBudget
    minAvailable:
    ## Maximum unavailable instances; ignored if there is no PodDisruptionBudget
    maxUnavailable:

  networkPolicy:
    # Whether to create a network policy that allows/restricts access to the service
    enabled: false

  ## podSecurityPolicy for fine-grained authorization of pod creation and updates
  podSecurityPolicy:
    # Specifies whether a pod security policy should be created
    enabled: false

  serviceMonitor:
    # Whether or not to create a Prometheus Operator service monitor.
    enabled: false
    ## Here labels can be added to the serviceMonitor
    labels: {}
    ## Here annotations can be added to the serviceMonitor
    annotations: {}

  ## Optional containers, i.e. for auth addons.
  optionalContainers:
    enabled: false
    containers: []
